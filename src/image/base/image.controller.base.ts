/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ImageService } from "../image.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Image } from "./Image";
import { ImageFindManyArgs } from "./ImageFindManyArgs";
import { ImageWhereUniqueInput } from "./ImageWhereUniqueInput";
import { ImageUpdateInput } from "./ImageUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { FileInterceptor } from "@nestjs/platform-express";
import { UploadImageResponse } from "./UploadImageResponse";
import { AuthUser } from "src/decorators/public.decorator";
import { ImageFolderType } from "./ImageType.enum";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ImageControllerBase {
  constructor(
    protected readonly service: ImageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}


  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post('/upload-image')
  @swagger.ApiConsumes('multipart/form-data')
  @swagger.ApiQuery({
    name: 'type',
    required: false,
    enum: ImageFolderType,
  })
  @swagger.ApiBody({
    required: true,
    schema: {
      type: "object",
      properties: {
        file: {
          type: "string",
          format: "binary",
        }
      }
    }
  })
  @swagger.ApiOperation({ summary: 'Upload Single image' })
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: UploadImageResponse })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @common.UseInterceptors(FileInterceptor('file'))
  async uploadImage(@common.UploadedFile() file: Express.Multer.File, @common.Query('type') type: ImageFolderType, @AuthUser() user:User,): Promise<UploadImageResponse> {
    return await this.service.uploadImage(file, user.id, type);
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post('/upload-images')
  @swagger.ApiConsumes('multipart/form-data')
  @swagger.ApiQuery({ 
    name: 'type',
    required: false,
    enum: ImageFolderType,
  })
  @swagger.ApiBody({
    required: true,
    schema: {
      type: "object",
      properties: {
        files: {
          type: "array",
          items: {
            type: "string",
            format: "binary"
          }
        }
      }
    }
  })
  @swagger.ApiOperation({ summary: 'Upload Multiple images' })
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: [UploadImageResponse] })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @common.UseInterceptors(FileInterceptor('files', { limits: { files: 4 } }))
  async uploadImages(@common.UploadedFiles() files: Express.Multer.File[], 
  @AuthUser() user:User, @common.Query('type') type: ImageFolderType): Promise<UploadImageResponse[]> {
    return await this.service.uploadImages(files, user.id, type);
  }


  // @common.UseInterceptors(AclValidateRequestInterceptor)
  // @common.Post()
  // @swagger.ApiCreatedResponse({ type: Image })
  // @nestAccessControl.UseRoles({
  //   resource: "Image",
  //   action: "create",
  //   possession: "any",
  // })
  // @swagger.ApiForbiddenResponse({
  //   type: errors.ForbiddenException,
  // })
  // async createImage(@common.Body() data: ImageCreateInput): Promise<Image> {
  //   return await this.service.createImage({
  //     data: {
  //       ...data,

  //       tour: data.tour
  //         ? {
  //             connect: data.tour,
  //           }
  //         : undefined,
  //     },
  //     select: {
  //       createdAt: true,
  //       id: true,

  //       tour: {
  //         select: {
  //           id: true,
  //         },
  //       },

  //       updatedAt: true,
  //       url: true,
  //     },
  //   });
  // }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Image] })
  @ApiNestedQuery(ImageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async images(@common.Req() request: Request): Promise<Image[]> {
    const args = plainToClass(ImageFindManyArgs, request.query);
    return this.service.images({
      ...args,
      select: {
        createdAt: true,
        id: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Image })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async image(
    @common.Param() params: ImageWhereUniqueInput
  ): Promise<Image | null> {
    const result = await this.service.image({
      where: params,
      select: {
        createdAt: true,
        id: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Image })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateImage(
    @common.Param() params: ImageWhereUniqueInput,
    @common.Body() data: ImageUpdateInput
  ): Promise<Image | null> {
    try {
      return await this.service.updateImage({
        where: params,
        data: {
          ...data,

          tour: data.tour
            ? {
                connect: data.tour,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          tour: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Image })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteImage(
    @common.Param() params: ImageWhereUniqueInput
  ): Promise<Image | null> {
    try {
      return await this.service.deleteImage({
        where: params,
        select: {
          createdAt: true,
          id: true,

          tour: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: ImageWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        firstName: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        lastName: true,
        phoneNumber: true,
        roles: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: ImageWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateImage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: ImageWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateImage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: ImageWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateImage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
