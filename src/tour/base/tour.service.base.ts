/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tour, // @ts-ignore
  Image, // @ts-ignore
  User,
} from "@prisma/client";

export class TourServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TourCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TourCountArgs>
  ): Promise<number> {
    return this.prisma.tour.count(args);
  }

  async tours<T extends Prisma.TourFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TourFindManyArgs>
  ): Promise<Tour[]> {
    return this.prisma.tour.findMany(args);
  }
  async tour<T extends Prisma.TourFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TourFindUniqueArgs>
  ): Promise<Tour | null> {
    return this.prisma.tour.findUnique(args);
  }
  async createTour<T extends Prisma.TourCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TourCreateArgs>
  ): Promise<Tour> {
    return this.prisma.tour.create<T>(args);
  }
  async updateTour<T extends Prisma.TourUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TourUpdateArgs>
  ): Promise<Tour> {
    return this.prisma.tour.update<T>(args);
  }
  async deleteTour<T extends Prisma.TourDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TourDeleteArgs>
  ): Promise<Tour> {
    return this.prisma.tour.delete(args);
  }

  async findImages(
    parentId: string,
    args: Prisma.ImageFindManyArgs
  ): Promise<Image[]> {
    return this.prisma.tour
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .images(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.tour
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
