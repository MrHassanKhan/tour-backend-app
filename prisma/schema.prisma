datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  firstName       String?
  lastName        String?
  password        String
  phoneNumber     String    @unique
  isPhoneVerified Boolean   @default(false)
  twoFA           Boolean   @default(false)
  roles           Json
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  image           Image?    @relation(fields: [imageId], references: [id])
  imageId         String?
  tours           Tour[]
  comments        Comment[]
  ratings         Rating[]
  otp             Otp[] 
}

model Otp {
  id        String   @id @default(cuid())
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @db.Timestamp(5)
  useCase   UserCase

  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum UserCase {
  LOGIN // to login user and sent OTP to phone who have 2FA enabled
  D2FA // to disable 2FA
  E2FA // to enable 2FA
  VPHONE // to verify phone number
}

model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  users     User[]
  tour      Tour?    @relation(fields: [tourId], references: [id])
  tourId    String?
}

model Rating {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  value     Float
}

model Comment {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  text      String?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  tour      Tour?    @relation(fields: [tourId], references: [id])
  tourId    String?
}

model Tour {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  images      Image[]
  latitude    Float
  longitude   Float
  name        String
  updatedAt   DateTime @updatedAt
  
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  comments    Comment[]
}
